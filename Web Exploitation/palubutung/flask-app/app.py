from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_mysqldb import MySQL
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from urllib.parse import urlparse
import requests

import os

app = Flask(__name__)


def get_client_ip():
    client_ip = get_remote_address()
    app.logger.info(f"Client IP: {client_ip}")
    return client_ip


limiter = Limiter(
    app=app,
    key_func=get_client_ip,
    default_limits=["5 per second"],
    storage_uri="memory://",
)


logs = []
key = os.urandom(32)
nonce = os.urandom(12)
flag = os.environ["FLAG"]

app.config["MYSQL_HOST"] = "db"
app.config["MYSQL_USER"] = os.environ["MYSQL_USER"]
app.config["MYSQL_PASSWORD"] = os.environ["MYSQL_PASSWORD"]
app.config["MYSQL_DB"] = os.environ["MYSQL_DB"]

print("app.config:", app.config)

mysql = MySQL(app)


@app.route("/log", methods=["POST"])
def log_event():
    global logs
    data = request.get_json()
    newLog = f"Received log: {data} from {get_client_ip()}"
    app.logger.info(newLog)
    logs.append(str(newLog))
    return "Hey, It's working", 200


@app.route("/log", methods=["GET"])
def get_logs():
    global logs
    app.logger.info(f"Current logs: {logs}")
    return jsonify(logs)


@app.route("/health", methods=["GET"])
def health_check():
    return "OK", 200


@app.route("/users", methods=["GET"])
def get_users():
    username = request.args.get("username")

    if not username:
        return "Missing username", 400

    query = f"""SELECT username, /*{key.hex()}*/ /*{nonce.hex()}*/ role from User where username like '%{username}%' order by 1 limit 1"""
    app.logger.info(
        f"{get_client_ip()} is executing query: {query}"
    )  # hayoloh jangan ngetroll

    try:
        cur = mysql.connection.cursor()
        cur.execute(query)
        records = cur.fetchall()
        column_names = [desc[0] for desc in cur.description]
        cur.close()
    except Exception as e:
        return str(e), 400

    result = [dict(zip(column_names, row)) for row in records]
    return jsonify(result)


@app.route("/flag", methods=["GET"])
def get_flag():
    global flag
    if get_client_ip() != "127.0.0.1":
        return "Forbidden", 403
    app.logger.info(f"Encrypting flag: {flag}")
    encrypted_flag = AESGCM(key).encrypt(nonce, flag.encode(), associated_data=None)
    return encrypted_flag.hex(), 200


@app.route("/debug", methods=["GET"])
def debug():
    url = request.args.get("url")

    trusted = True

    if urlparse(url).hostname in ["localhost", "127.0.0.1", "::1", "0.0.0.0"]:
        app.logger.info(
            f"Not trusted debug from {url}, hostname is {urlparse(url).hostname}"
        )
        trusted = False

    if url.endswith("/flag"):
        app.logger.info(f"Not trusted debug from {url}")
        trusted = False

    if trusted:
        app.logger.info(f"Trusted debug from {url}")

        try:
            res = requests.get(url)
        except Exception as e:
            return str(e), 400

        return f"Thanks for debugging with us, here's your response: {res.text}", 200

    return "Ok but we don't trust you yet", 200


app.run(host="0.0.0.0", port=5000, debug=True)
