import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  const secret = process.env.JWT_SECRET;

  if (!secret) {
    return NextResponse.json(
      { error: "JWT secret is not set" },
      { status: 500 },
    );
  }

  const { username, password } = await req.json();

  if (!username || !password)
    return NextResponse.json(
      { error: "Username and password are required" },
      { status: 401 },
    );

  if (typeof username !== "string" || typeof password !== "string")
    return NextResponse.json(
      { error: "Invalid username or password" },
      { status: 401 },
    );

  try {
    const user = await prisma.user.findUnique({ where: { username } });

    if (!user)
      return NextResponse.json({ error: "User not found" }, { status: 401 });
    const valid = await bcrypt.compare(password, user.passwordHash);
    if (!valid)
      return NextResponse.json({ error: "Invalid password" }, { status: 401 });

    const token = jwt.sign({ id: user.id, role: user.role }, secret, {
      expiresIn: "2h",
    });
    return NextResponse.json({ token });
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 },
    );
  }
}
