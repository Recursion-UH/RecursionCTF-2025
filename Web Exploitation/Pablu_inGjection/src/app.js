const express = require('express');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

const pool = new Pool({
  user: 'Pablu',
  host: 'db',
  database: 'pg-challenge',
  password: 'pablu09',
  port: 5432,
});

const initDb = async () => {
  const maxRetries = 10;
  let retries = 0;

  while (retries < maxRetries) {
    try {
      const client = await pool.connect();

      await client.query(`CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username TEXT,
        password TEXT
      )`);

      await client.query(`INSERT INTO users (username, password) 
        SELECT 'Pablu', 'inipasswordnya' 
        WHERE NOT EXISTS (SELECT 1 FROM users WHERE username='Pablu')`);

      await client.query(`DROP TABLE IF EXISTS pabluflags`);
      await client.query(`CREATE TABLE pabluflags (
        id SERIAL PRIMARY KEY,
        pgflag TEXT
      )`);

      await client.query(`INSERT INTO pabluflags (pgflag)
        SELECT $1 WHERE NOT EXISTS (SELECT 1 FROM pabluflags)`, [process.env.FLAG]);

      client.release();
      console.log("✅ DB initialized.");
      break;
    } catch (err) {
      console.error(`❌ DB init failed (retry ${retries + 1}/${maxRetries}):`, err.message);
      retries++;
      await new Promise(res => setTimeout(res, 3000)); // tunggu 3 detik sebelum retry
    }
  }
};

initDb();

app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Pablu InGjection</title>
      <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;600&display=swap" rel="stylesheet">
      <style>
        * {
          box-sizing: border-box;
        }

        body {
          margin: 0;
          font-family: 'Poppins', sans-serif;
          display: flex;
          align-items: center;
          justify-content: center;
          height: 100vh;
          background: linear-gradient(135deg, #f6d365, #fda085);
          color: #5a4636;
        }

        .card {
          background: rgba(255, 255, 255, 0.3);
          padding: 50px 40px;
          border-radius: 20px;
          backdrop-filter: blur(12px);
          box-shadow: 0 12px 40px rgba(0,0,0,0.2);
          text-align: center;
          width: 100%;
          max-width: 480px;
        }

        h1 {
          margin-bottom: 25px;
          font-weight: 600;
          font-size: 1.8rem;
          color: #5a4636;
        }

        form {
          display: flex;
          flex-direction: column;
        }

        input {
          padding: 14px;
          margin: 10px 0;
          background: rgba(255,255,255,0.4);
          border: none;
          border-radius: 10px;
          color: #5a4636;
          font-size: 1rem;
        }

        input::placeholder {
          color: #a9846e;
        }

        button {
          padding: 14px;
          background-color: #ff7e5f;
          border: none;
          border-radius: 10px;
          color: white;
          font-weight: bold;
          font-size: 1rem;
          cursor: pointer;
          margin-top: 15px;
          transition: background 0.3s ease;
        }

        button:hover {
          background-color: #feb47b;
        }
      </style>
    </head>
    <body>
      <div class="card">
        <h1>Pablu InGjection</h1>
        <form method="POST" action="/login">
          <input type="text" name="username" placeholder="Username" required />
          <input type="password" name="password" placeholder="Password" required />
          <button type="submit">Login</button>
        </form>
      </div>
    </body>
    </html>
  `);
});

app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  if (typeof username !== 'string' || typeof password !== 'string') {
    return res.send('<h1>Invalid username or password!</h1>');
  }

  const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
  console.log('Executing query:', query);

  try {
    const result = await pool.query(query);
    if (result.rows.length > 0) {
      if (result.rows.length > 0 && result.rows[0].username.includes('Pablu')) {
        res.send(`<h1>Welcome, ${result.rows[0].username} :)</h1>`);
      }
      else {
        res.send('<h1>Who are you? Only Pablu is allowed to login!</h1>');
      }
    } else {
      res.send('<h1>Invalid username or password!</h1>');
    }    
  } catch (err) {
    res.send(`<pre>${err.message}</pre>`);
  }
});

app.listen(3000, () => {
  console.log('PostgreSQL SQLi Challenge is running on http://localhost:3000');
});
